{
  "version": 3,
  "sources": ["../../assets/utils/attribute.js", "../../assets/hooks/portal.js", "../../assets/hooks/index.js", "../../assets/index.js"],
  "sourcesContent": ["export function getAttributeOrThrow(element, attr, transform = null) {\n  if (!element.hasAttribute(attr)) {\n    throw new Error(\n      `Missing attribute '${attr}' on element <${element.tagName}:${element.id}>`\n    );\n  }\n\n  const value = element.getAttribute(attr);\n\n  return transform ? transform(value) : value;\n}\n\nexport function getAttributeOrDefault(\n  element,\n  attr,\n  defaultValue,\n  transform = null\n) {\n  if (element.hasAttribute(attr)) {\n    const value = element.getAttribute(attr);\n    return transform ? transform(value) : value;\n  } else {\n    return defaultValue;\n  }\n}\n\nexport function getElementAttributeOrThrow(element, type, attr) {\n  if (!(element instanceof type)) throw new Error(`Element is not of type '${type}'`);\n  return getAttributeOrThrow(element, attr);\n}\n\nexport function parseBoolean(value) {\n  if (value === \"true\") {\n    return true;\n  }\n\n  if (value === \"false\") {\n    return false;\n  }\n\n  throw new Error(\n    `Invalid boolean attribute ${value}, should be either \"true\" or \"false\"`\n  );\n}\n\nexport function parseInteger(value) {\n  const number = parseInt(value, 10);\n\n  if (Number.isNaN(number)) {\n    throw new Error(`Invalid integer value ${value}`);\n  }\n\n  return number;\n}", "import { getAttributeOrThrow, parseInteger } from \"../utils/attribute\"\n\n/**\n * A hook used to create a Portal in the DOM.\n * \n * Portals give us the ability to render components outside the DOM hierarchy of their parent components. \n * This can be achieved using techniques such as creating a new HTML element outside the normal DOM hierarchy.\n * It also facilitates the placement of positioned that can be styled without being constrained by their parent components. \n * In essence, it allows the developers to create more flexible and powerful user interfaces, such as modal dialogs, tooltips, and popovers.\n * \n * ## Configuration\n * \n *  * `data-update` - the operation to be executed, it can be either: origin (default), append or prepend.\n *  * `data-target` - the DOM element where the portal is going to be placed. \n *  * `data-close-delay` - delay in ms to close the open portal.\n */\n\n// Cache a list of possible DOM events that we want to forward\nconst events = Object.keys(window).filter((k) => /\\bon/.test(k))\n\nfunction forwardEvents(template, portal) {\n  for (const event of events) {\n    portal.addEventListener(event, e => {\n      e.stopPropagation();\n      template.dispatchEvent(new e.constructor(e.type, e));\n    });\n  }\n}\n\nconst updates = {\n  \"prepend\": (target, clone) => {\n    target.parentNode.insertBefore(clone, target)\n  },\n  \"append\": (target, clone) => {\n    target.parentNode.insertBefore(clone, target.nextSibling)\n  },\n  \"origin\": (target, clone) => {\n    target.appendChild(clone)\n  }\n}\n\nexport default {\n  clone: null,\n  target: null,\n  update: null,\n  closeDelay: null,\n  closeTimeout: null,\n\n  mounted() {\n    const targetSelector = getAttributeOrThrow(this.el, \"data-target\");\n\n    this.target = document.querySelector(targetSelector);\n    this.update = getAttributeOrThrow(this.el, \"data-update\");\n    this.closeDelay = getAttributeOrThrow(this.el, \"data-close-delay\", parseInteger);\n\n    this.el.addEventListener(\"portal:open\", this.handleOpen.bind(this));\n    this.el.addEventListener(\"portal:close\", this.handleClose.bind(this));\n  },\n\n  destroyed() {\n    this.clone.remove();\n\n    // Removes the timeouts just to be sure \n    clearTimeout(this.closeTimeout);\n  },\n\n  handleOpen() {\n    this.clone = this.el.content.cloneNode(true).firstElementChild;\n\n    // Opens the portal and teleports clone to target.\n    // Await a little before opening so animation ca be properly displayed.\n    updates[this.update](this.target, this.clone);\n\n    // Await until next tick to register the forwarded events\n    forwardEvents(this.el, this.clone)\n  },\n\n  handleClose() {\n    // Cache old clone to avoid race conditions\n    const clone = this.clone\n\n    // Closes the portal and removes the cloned element.\n    // Await a little before closing so animations can be properly displayed. \n    this.closeTimeout = setTimeout(() => clone.remove(), this.closeDelay);\n  },\n}\n", "import Portal from \"./portal\";\n\nexport default {\n  \"Swish.Portal\": Portal\n}\n", "\nimport Hooks from \"./hooks\";\n\nexport default {\n\tHooks\n}\n"],
  "mappings": ";AAAO,6BAA6B,SAAS,MAAM,YAAY,MAAM;AACnE,MAAI,CAAC,QAAQ,aAAa,OAAO;AAC/B,UAAM,IAAI,MACR,sBAAsB,qBAAqB,QAAQ,WAAW,QAAQ;AAAA;AAI1E,QAAM,QAAQ,QAAQ,aAAa;AAEnC,SAAO,YAAY,UAAU,SAAS;AAAA;AAoCjC,sBAAsB,OAAO;AAClC,QAAM,SAAS,SAAS,OAAO;AAE/B,MAAI,OAAO,MAAM,SAAS;AACxB,UAAM,IAAI,MAAM,yBAAyB;AAAA;AAG3C,SAAO;AAAA;;;AClCT,IAAM,SAAS,OAAO,KAAK,QAAQ,OAAO,CAAC,MAAM,OAAO,KAAK;AAE7D,uBAAuB,UAAU,QAAQ;AACvC,aAAW,SAAS,QAAQ;AAC1B,WAAO,iBAAiB,OAAO,OAAK;AAClC,QAAE;AACF,eAAS,cAAc,IAAI,EAAE,YAAY,EAAE,MAAM;AAAA;AAAA;AAAA;AAKvD,IAAM,UAAU;AAAA,EACd,WAAW,CAAC,QAAQ,UAAU;AAC5B,WAAO,WAAW,aAAa,OAAO;AAAA;AAAA,EAExC,UAAU,CAAC,QAAQ,UAAU;AAC3B,WAAO,WAAW,aAAa,OAAO,OAAO;AAAA;AAAA,EAE/C,UAAU,CAAC,QAAQ,UAAU;AAC3B,WAAO,YAAY;AAAA;AAAA;AAIvB,IAAO,iBAAQ;AAAA,EACb,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,cAAc;AAAA,EAEd,UAAU;AACR,UAAM,iBAAiB,oBAAoB,KAAK,IAAI;AAEpD,SAAK,SAAS,SAAS,cAAc;AACrC,SAAK,SAAS,oBAAoB,KAAK,IAAI;AAC3C,SAAK,aAAa,oBAAoB,KAAK,IAAI,oBAAoB;AAEnE,SAAK,GAAG,iBAAiB,eAAe,KAAK,WAAW,KAAK;AAC7D,SAAK,GAAG,iBAAiB,gBAAgB,KAAK,YAAY,KAAK;AAAA;AAAA,EAGjE,YAAY;AACV,SAAK,MAAM;AAGX,iBAAa,KAAK;AAAA;AAAA,EAGpB,aAAa;AACX,SAAK,QAAQ,KAAK,GAAG,QAAQ,UAAU,MAAM;AAI7C,YAAQ,KAAK,QAAQ,KAAK,QAAQ,KAAK;AAGvC,kBAAc,KAAK,IAAI,KAAK;AAAA;AAAA,EAG9B,cAAc;AAEZ,UAAM,QAAQ,KAAK;AAInB,SAAK,eAAe,WAAW,MAAM,MAAM,UAAU,KAAK;AAAA;AAAA;;;ACjF9D,IAAO,gBAAQ;AAAA,EACb,gBAAgB;AAAA;;;ACAlB,IAAO,iBAAQ;AAAA,EACd;AAAA;",
  "names": []
}
